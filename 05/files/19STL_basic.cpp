#include <iostream>

using namespace std;

/**
 * 1.STL(Standard Template Library)标准模板库
 *  STL从广义上分为容器(container) 算法(algorithm) 迭代器(iterator)
 *  容器和算法之间通过迭代器进行无缝连接
 *  STL几乎所有的代码都采用了模板类或者模板函数
 *
 * 2.STL六大组件
 *  STL大体分为六大组件,分别是容器,算法,迭代器,仿函数,适配器(配接器),空间配置器
 *  (1)容器: 各种数据结构,如vector,list,deque,set,map等用来存放数据
 *  (2)算法: 常用的各种算法,如sort,find,copy,for_each等
 *  (3)迭代器: 扮演了容器和算法之间的胶合剂
 *  (4)仿函数: 行为类似函数,可作为算法的某种策略
 *  (5)适配器: 一种用来修饰容器或者仿函数或迭代器接口的东西
 *  (6)空间配置器: 负责空间的配置与管理
 *
 * 3.STL中容器,算法,迭代器
 *  (1)容器:
 *      STL容器就是将运用最广泛地一些数据结构实现出来
 *      常用的数据结构:数组,链表,树,栈,队列,集合,映射表等
 *      这些容器分为序列式容器和关联式容器两种:
 *          序列式容器: 强调值得排序,序列式容器中的每个元素均有固定的位置
 *          关联式容器: 二叉树结构,各元素之间没有严格的物理上的顺序关系
 *  (2)算法:
 *      有限的步骤,解决逻辑或者数学上的问题,这一门学科我们叫做算法(Algorithms)
 *      算法分为质变算法和非质变算法:
 *          质变算法: 指运算过程中会更改区间内的元素的内容,例如拷贝,替换,删除等
 *          非质变算法: 是指运算过程中不会改变区间内的元素内容,例如查找,计数,遍历,寻找极值等等
 *  (3)迭代器:
 *      提供一种方法,使之能够依序寻找某个容器所含的各个元素,而又无需暴露容器的内部表示方式
 *      每个容器都有自己的专属的迭代器
 *      迭代器使用非常类似于指针,初学阶段我们可以先理解迭代器为指针
 *
 * 4.迭代器分类:
 *   种类                     功能                                      支持运算
 *   输入迭代器              对数据的只读访问                            只读,支持++,==,!=
 *   输出迭代器              对数据的只写访问                            只写,支持++
 *   前向迭代器              读写操作,并能向前推进迭代器                   读写,支持++,==,!=
 *   双向迭代器              读写操作,并能向前和向后操作                   读写,支持++,--
 *   随机访问迭代器           读写操作,可以以跳跃的方式访问任意数据           读写,支持++,--,[n],-n,<,<=,>,>=
 *                          功能最强的迭代器
 *
 *   常用的容器中迭代器种类为双向迭代器和随机访问迭代器
 */

int main() {

    return 0;
}
